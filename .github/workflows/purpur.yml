# .github/workflows/build-purpur.yml
# ----------------------------------------------------------------
# 这是一个用于构建 Minecraft Purpur 服务端 Docker 镜像的 GitHub Actions 工作流。
#
# 功能特性:
# 1. 多架构构建: 支持 amd64 和 arm64 架构。
# 2. 动态 Java 版本: 自动根据输入的 Minecraft 版本选择 Java 17 或 Java 21 作为基础镜像。
#    - MC >= 1.20.5 使用 Java 21
#    - MC < 1.20.5 使用 Java 17
# 3. 手动触发与版本控制: 支持手动触发并输入版本号，也支持通过 push 自动触发。
#    - 最终镜像标签为 <MC_VERSION>，例如 "1.20.5"。
#    - 各架构的中间镜像标签为 <MC_VERSION>-<arch>，例如 "1.20.5-amd64"。
# 4. 串行执行: 构建任务将按顺序执行（先完成 amd64，再开始 arm64），便于排错和控制并发。
# 5. 推送到私有 Gitea 仓库: 自动构建并推送到你自建的 Gitea 容器镜像仓库。
# ----------------------------------------------------------------

name: Build Purpur Docker Image & Push to Gitea

on:
  # 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:
    inputs:
      mc_version:
        description: 'Minecraft Version (e.g., 1.20.4, 1.20.5)'
        required: true
        default: '1.20.4'

# 全局环境变量
env:
  # 当 push 触发时使用的默认 Minecraft 版本
  DEFAULT_MC_VERSION: "1.20.4"
  # Gitea 上的镜像名称
  GITEA_IMAGE_NAME: "purpur"
  # 第一个需要 Java 21 的 Minecraft 版本，用于版本比较
  JAVA_21_CUTOFF_VERSION: "1.20.5"

jobs:
  build-and-push-arch:
    strategy:
      fail-fast: false
      # 设置最大并行数为 1，实现串行执行
      max-parallel: 1
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-22.04-arm
            
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Versions
        id: get_versions
        run: |
          # 步骤 1: 确定 Minecraft 版本
          # 如果是手动触发，则使用输入的版本号；否则，使用环境变量中定义的默认版本号
          MC_VERSION=${{ github.event.inputs.mc_version || env.DEFAULT_MC_VERSION }}
          echo "MC_VERSION=$MC_VERSION" >> $GITHUB_ENV
          echo "Determined Minecraft version: $MC_VERSION"

          # 步骤 2: 根据 Minecraft 版本判断需要的 Java 版本
          # 使用 dpkg 工具比较版本号，这比简单的字符串比较更可靠
          if dpkg --compare-versions "$MC_VERSION" "ge" "${{ env.JAVA_21_CUTOFF_VERSION }}"; then
            JAVA_TAG="21"
            echo "Version $MC_VERSION requires Java 21."
          else
            JAVA_TAG="17"
            echo "Version $MC_VERSION requires Java 17."
          fi
          
          # 步骤 3: 设置基础镜像环境变量，供后续步骤使用
          BASE_IMAGE="container-registry.oracle.com/graalvm/jdk:$JAVA_TAG"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_ENV
          echo "Using base image: $BASE_IMAGE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.GITEA_HOST }}
          username: ${{ secrets.GITEA_USERNAME }}
          password: ${{ secrets.GITEA_REGISTRY_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: buildx1
        with:
          context: ./purpur
          file: ./purpur/Dockerfile
          platforms: linux/${{ matrix.arch }}
          build-args: |
            MC_VERSION=${{ env.MC_VERSION }}
            # 将动态决定的基础镜像名传递给 Dockerfile
            BASE_IMAGE=${{ env.BASE_IMAGE }}
          tags: ${{ secrets.GITEA_HOST }}/${{ secrets.GITEA_USERNAME }}/${{ env.GITEA_IMAGE_NAME }}:${{ env.MC_VERSION }}-${{ matrix.arch }}
          push: true
          # 禁用 provenance 和 sbom，避免创建额外的 manifest
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Wait to retry
        if: steps.buildx1.outcome != 'success'
        run: |
          sleep 10
      - name: Build and push Docker image
        if: steps.buildx1.outcome != 'success'
        uses: docker/build-push-action@v5
        with:
          context: ./purpur
          file: ./purpur/Dockerfile
          platforms: linux/${{ matrix.arch }}
          build-args: |
            MC_VERSION=${{ env.MC_VERSION }}
            # 将动态决定的基础镜像名传递给 Dockerfile
            BASE_IMAGE=${{ env.BASE_IMAGE }}
          tags: ${{ secrets.GITEA_HOST }}/${{ secrets.GITEA_USERNAME }}/${{ env.GITEA_IMAGE_NAME }}:${{ env.MC_VERSION }}-${{ matrix.arch }}
          push: true
          # 禁用 provenance 和 sbom，避免创建额外的 manifest
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  merge-manifest:
    needs: build-and-push-arch
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.GITEA_HOST }}
          username: ${{ secrets.GITEA_USERNAME }}
          password: ${{ secrets.GITEA_REGISTRY_PAT }}

      - name: Determine Minecraft Version
        # 在这个 job 中也需要确定版本号，以保持与上一个 job 一致
        run: |
          MC_VERSION=${{ github.event.inputs.mc_version || env.DEFAULT_MC_VERSION }}
          echo "MC_VERSION=$MC_VERSION" >> $GITHUB_ENV

      - name: Create and push manifest list with version tag
        run: |
          IMAGE_BASE="${{ secrets.GITEA_HOST }}/${{ secrets.GITEA_USERNAME }}/${{ env.GITEA_IMAGE_NAME }}"
          VERSION_TAG="${IMAGE_BASE}:${{ env.MC_VERSION }}"
          AMD_TAG="${IMAGE_BASE}:${{ env.MC_VERSION }}-amd64"
          ARM_TAG="${IMAGE_BASE}:${{ env.MC_VERSION }}-arm64"

          echo "--- Creating Manifest List for $VERSION_TAG ---"

          # 清理所有可能存在的旧 manifest（忽略错误）
          echo "Cleaning up old manifests..."
          docker manifest rm ${VERSION_TAG} 2>/dev/null || true
          docker manifest rm ${AMD_TAG} 2>/dev/null || true
          docker manifest rm ${ARM_TAG} 2>/dev/null || true

          # 检查架构特定镜像状态
          echo "Checking image status..."
          docker manifest inspect ${AMD_TAG} || echo "❌ amd64 image not found or is manifest list"
          docker manifest inspect ${ARM_TAG} || echo "❌ arm64 image not found or is manifest list"

          # 检查架构镜像是否存在
          if docker manifest inspect ${AMD_TAG} >/dev/null 2>&1 && docker manifest inspect ${ARM_TAG} >/dev/null 2>&1; then
            echo "Both architecture images exist, creating manifest list..."

            # 由于架构标签可能是 manifest list，我们使用 --amend 来处理
            docker manifest create ${VERSION_TAG} \
              --amend ${AMD_TAG} \
              --amend ${ARM_TAG}
            docker manifest push ${VERSION_TAG}
            echo "✅ Gitea manifest pushed successfully"
          else
            echo "❌ Architecture images not ready, skipping Gitea manifest creation"
          fi

      - name: Inspect final manifest
        run: |
          echo "--- Inspecting Final Manifest ---"
          docker manifest inspect ${{ secrets.GITEA_HOST }}/${{ secrets.GITEA_USERNAME }}/${{ env.GITEA_IMAGE_NAME }}:${{ env.MC_VERSION }}
