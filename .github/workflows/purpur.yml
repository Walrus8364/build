# .github/workflows/build-purpur.yml
name: Build Purpur Docker Image & Push to Gitea

on:
  workflow_dispatch:
    # --- 新增部分：定义手动触发时的输入参数 ---
    inputs:
      mc_version:
        description: 'Minecraft Version (e.g., 1.20.4)'
        required: true
        default: '1.20.4' # 手动触发时的默认值

env:
  # 当 push 触发时使用的默认版本
  DEFAULT_MC_VERSION: "1.20.4" 
  GITEA_IMAGE_NAME: "purpur"
  # Minecraft 1.20.5 是第一个需要 Java 21 的版本
  JAVA_21_CUTOFF_VERSION: "1.20.5"

jobs:
  build-and-push-arch:
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-22.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Minecraft Version
        id: get_version
        run: |
          # 如果是手动触发(workflow_dispatch)，则使用输入的版本号
          # 否则，使用环境变量中定义的默认版本号
          VERSION=${{ github.event.inputs.mc_version || env.DEFAULT_MC_VERSION }}
          echo "Using Minecraft version: $VERSION"
          echo "MC_VERSION=$VERSION" >> $GITHUB_ENV

          # 使用 dpkg 工具比较版本号，这比简单的字符串比较更可靠
          if dpkg --compare-versions "$MC_VERSION" "ge" "${{ env.JAVA_21_CUTOFF_VERSION }}"; then
            JAVA_TAG="21"
            echo "Version $MC_VERSION requires Java 21."
          else
            JAVA_TAG="17"
            echo "Version $MC_VERSION requires Java 17."
          fi
          
          # 设置基础镜像环境变量，供后续步骤使用
          BASE_IMAGE="container-registry.oracle.com/graalvm/jdk:$JAVA_TAG"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_ENV
          echo "Using base image: $BASE_IMAGE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.GITEA_HOST }}
          username: ${{ secrets.GITEA_USERNAME }}
          password: ${{ secrets.GITEA_REGISTRY_PAT }}

      - name: Build and push Docker image with version-arch tag
        uses: docker/build-push-action@v5
        with:
          context: ./purpur
          file: ./purpur/Dockerfile
          platforms: linux/${{ matrix.arch }}
          build-args: |
            # 使用上一步确定的版本号
            MC_VERSION=${{ env.MC_VERSION }}
            # 将我们动态决定的基础镜像名传递给 Dockerfile
            BASE_IMAGE=${{ env.BASE_IMAGE }}
          tags: ${{ secrets.GITEA_HOST }}/${{ secrets.GITEA_USERNAME }}/${{ env.GITEA_IMAGE_NAME }}:${{ env.MC_VERSION }}-${{ matrix.arch }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  merge-manifest:
    needs: build-and-push-arch
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.GITEA_HOST }}
          username: ${{ secrets.GITEA_USERNAME }}
          password: ${{ secrets.GITEA_REGISTRY_PAT }}

      # --- 核心改动：同样在这里确定版本号，确保与上一个 job 一致 ---
      - name: Determine Minecraft Version
        id: get_version
        run: |
          VERSION=${{ github.event.inputs.mc_version || env.DEFAULT_MC_VERSION }}
          echo "Using Minecraft version: $VERSION"
          echo "MC_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create and push manifest list with version tag
        run: |
          IMAGE_BASE="${{ secrets.GITEA_HOST }}/${{ secrets.GITEA_USERNAME }}/${{ env.GITEA_IMAGE_NAME }}"
          # 使用确定的版本号作为最终标签
          VERSION_TAG="${IMAGE_BASE}:${{ env.MC_VERSION }}"

          echo "Creating manifest list for ${VERSION_TAG}"
          
          docker manifest create ${VERSION_TAG} \
            --amend ${IMAGE_BASE}:${{ env.MC_VERSION }}-amd64 \
            --amend ${IMAGE_BASE}:${{ env.MC_VERSION }}-arm64
          
          echo "Pushing manifest list..."
          docker manifest push ${VERSION_TAG}

      - name: Inspect final manifest
        run: |
          echo "--- Inspecting Final Manifest ---"
          docker manifest inspect ${{ secrets.GITEA_HOST }}/${{ secrets.GITEA_USERNAME }}/${{ env.GITEA_IMAGE_NAME }}:${{ env.MC_VERSION }}
